// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ad {
namespace sync {

namespace {

const ::google::protobuf::Descriptor* Conf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Conf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_config_2eproto() {
  protobuf_AddDesc_config_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "config.proto");
  GOOGLE_CHECK(file != NULL);
  Conf_descriptor_ = file->message_type(0);
  static const int Conf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conf, size_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conf, size_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conf, round_long_),
  };
  Conf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Conf_descriptor_,
      Conf::default_instance_,
      Conf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Conf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_config_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Conf_descriptor_, &Conf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_config_2eproto() {
  delete Conf::default_instance_;
  delete Conf_reflection_;
}

void protobuf_AddDesc_config_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014config.proto\022\007ad.sync\":\n\004Conf\022\016\n\006size_"
    "h\030\001 \002(\005\022\016\n\006size_w\030\002 \002(\005\022\022\n\nround_long\030\003 "
    "\002(\005", 83);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config.proto", &protobuf_RegisterTypes);
  Conf::default_instance_ = new Conf();
  Conf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_config_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_config_2eproto {
  StaticDescriptorInitializer_config_2eproto() {
    protobuf_AddDesc_config_2eproto();
  }
} static_descriptor_initializer_config_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Conf::kSizeHFieldNumber;
const int Conf::kSizeWFieldNumber;
const int Conf::kRoundLongFieldNumber;
#endif  // !_MSC_VER

Conf::Conf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Conf::InitAsDefaultInstance() {
}

Conf::Conf(const Conf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Conf::SharedCtor() {
  _cached_size_ = 0;
  size_h_ = 0;
  size_w_ = 0;
  round_long_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Conf::~Conf() {
  SharedDtor();
}

void Conf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Conf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Conf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Conf_descriptor_;
}

const Conf& Conf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

Conf* Conf::default_instance_ = NULL;

Conf* Conf::New() const {
  return new Conf;
}

void Conf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_h_ = 0;
    size_w_ = 0;
    round_long_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Conf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 size_h = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_h_)));
          set_has_size_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size_w;
        break;
      }

      // required int32 size_w = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_w_)));
          set_has_size_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_round_long;
        break;
      }

      // required int32 round_long = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_long:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_long_)));
          set_has_round_long();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Conf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 size_h = 1;
  if (has_size_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size_h(), output);
  }

  // required int32 size_w = 2;
  if (has_size_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size_w(), output);
  }

  // required int32 round_long = 3;
  if (has_round_long()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->round_long(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Conf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 size_h = 1;
  if (has_size_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size_h(), target);
  }

  // required int32 size_w = 2;
  if (has_size_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size_w(), target);
  }

  // required int32 round_long = 3;
  if (has_round_long()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->round_long(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Conf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 size_h = 1;
    if (has_size_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size_h());
    }

    // required int32 size_w = 2;
    if (has_size_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size_w());
    }

    // required int32 round_long = 3;
    if (has_round_long()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_long());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Conf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Conf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Conf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Conf::MergeFrom(const Conf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size_h()) {
      set_size_h(from.size_h());
    }
    if (from.has_size_w()) {
      set_size_w(from.size_w());
    }
    if (from.has_round_long()) {
      set_round_long(from.round_long());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Conf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conf::CopyFrom(const Conf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Conf::Swap(Conf* other) {
  if (other != this) {
    std::swap(size_h_, other->size_h_);
    std::swap(size_w_, other->size_w_);
    std::swap(round_long_, other->round_long_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Conf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Conf_descriptor_;
  metadata.reflection = Conf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync
}  // namespace ad

// @@protoc_insertion_point(global_scope)
